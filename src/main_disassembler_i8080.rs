mod disassembler;
mod memory;

use disassembler::i8080::{disassemble, load_opcodes_table};

fn main() {
    let opcodes = load_opcodes_table();

    let mut memory = memory::Memory::new();
    let program = vec![
        0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, // ADC
        0xCE, 0xAF, // ACI 0ABH
        0x80, 0x81, 0x81, 0x83, 0x84, 0x85, 0x86, 0x87, // ADD
        0xc6, 0x18, // ADI
        0xA0, 0xA1, 0xA1, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, // ANA
        0xE6, 0xAB, // ANI
        0x2F, // CMA
        0x3f, // CMC
        0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, // CMP
        0xFE, 0x12, // CPI
        0xC4, 0x12, 0xA4, // CNZ
        0xCC, 0x12, 0xA4, // CZ
        0xD4, 0x12, 0xA4, // CNC
        0xDC, 0x12, 0xA4, // CC
        0xE4, 0x12, 0xA4, // CPO
        0xEC, 0x12, 0xA4, // CPE
        0xF4, 0x12, 0xA4, // CP
        0xFC, 0x12, 0xA4, // CM
        0xCD, 0x12, 0x9F, // CALL
        0x27, // DAA
        0x09, // DAD B
        0x19, // DAD D
        0x29, // DAD H
        0x39, // DAD SP
        0x05, 0x0D, 0x15, 0x1D, 0x25, 0x2D, 0x35, 0x3D, // DCR
        0x0B, 0x1B, 0x2B, 0x3B, // DCX
        0xF3, // DI
        0xFB, // EI
        0x76, // HLT
        0xDB, 0xAA, // IN
        0x04, 0x0C, 0x14, 0x1C, 0x24, 0x2C, 0x34, 0x3C, // INR
        0x03, 0x13, 0x23, 0x33, // INX
        0xC2, 0x34, 0x12, // JNZ
        0xCA, 0x34, 0x12, // JZ
        0xD2, 0x34, 0x12, // JNC
        0xDA, 0x34, 0x12, // JC
        0xE2, 0x34, 0x12, // JPO
        0xEA, 0xAA, 0xAA, // JPE
        0xF2, 0x34, 0x12, // JP
        0xFA, 0xAA, 0xAA, // JM
        0xC3, 0xAA, 0xAA, // JMP
        0x3A, 0x34, 0x12, // LDA
        0x0A, 0x1A, // LDAX
        0x2A, 0x34, 0x12, // LHLD
        0x01, 0x34, 0x12, // LXI B
        0x11, 0x34, 0x12, // LXI B
        0x21, 0x34, 0x12, // LXI B
        0x31, 0x34, 0x12, // LXI B
        0x06, 0x33, // MVI B
        0x0E, 0x55, // MVI C
        0x16, 0xAA, // MVI D
        0x1E, 0x33, // MVI E
        0x26, 0x55, // MVI H
        0x2E, 0xAA, // MVI L
        0x36, 0xAA, // MVI M
        0x3E, 0x55, // MVI A
        0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,// MOV A
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,// MOV B
        0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,// MOV C
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,// MOV D
        0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,// MOV E
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,// MOV H
        0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,// MOV L
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x77,// MOV M
        0x00, // NOP
        0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, // ORA
        0xE9, // PCHL
        0xC1, 0xD1, 0xE1, 0xF1, // POP 
        0xC5, 0xD5, 0xE5, 0xF5, // PUSH
        0x17, 0x1F, 0x07, 0x0F, // ROT
        0xC9, 0xC0, 0xC8,0xD0,0xD8,0xE0,0xE8,0xF0, 0xF8, // RET
        0xC7, 0xCF, 0xD7, 0xDF, 0xE7, 0xEF, 0xF7, 0xFF, // RST
        0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, // SBB
        0xDE, 0xAA, // SBI
        0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,// SUB
        0xD6, 0xAA, // SUI
        0x22, 0x98, 0xBA, // SHLD
        0x32, 0x34, 0x12, // STA
        0x02, 0x12, //STAX
        0xF9, // SPHL
        0xEB, // XCHG
        0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, // XRA
        0xEE, 0xAA, // XRI
        0xE3, // XTHL
    ];
    let start = 0x0600;
    memory.load_program(&program, start);
    let disassembly = disassemble(&memory, start, start + program.len() as u16, &opcodes);

    for line in disassembly {
        println!("{}", line);
    }
}
